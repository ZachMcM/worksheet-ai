datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  mcTests McTest[]
  writtenTests WrittenTest[]
  flashcardSets FlashCardSet[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model McTest {
  id String @id @default(cuid())
  name String
  prompt String
  user User @relation(fields: [userId], references: [id])
  userId String
  questions Question[]
  finished Boolean
  grade Decimal?
}

model Question {
  id String @id @default(cuid())
  test McTest @relation(fields: [testId], references: [id])
  testId String
  title String
  a String
  b String
  c String
  d String
  e String
  answer String
  userAnswer String?
  correct Boolean?
}

model FlashCardSet {
  id String @id @default(cuid())
  name String
  prompt String
  user User @relation(fields: [userId], references: [id])
  userId String
  flashCards FlashCard[]
}

model FlashCard {
  id String @id @default(cuid())
  name String
  prompt String
  flashCardSet FlashCardSet @relation(fields: [flashCardSetId], references: [id])
  flashCardSetId String
  question String
  answer String
}

model WrittenTest {
  id String @id @default(cuid())
  name String
  prompt String
  finished Boolean
  grade Decimal?
  userAnswer String?
  user User @relation(fields: [userId], references: [id])
  userId String
}

